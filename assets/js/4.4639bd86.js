(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{202:function(t,a,e){t.exports=e.p+"assets/img/git.aa33259c.png"},211:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" git")]),t._v(" "),s("h2",{attrs:{id:"概览图"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概览图"}},[t._v("#")]),t._v(" 概览图")]),t._v(" "),s("p",[s("img",{attrs:{src:e(202),alt:""}})]),t._v(" "),s("h2",{attrs:{id:"规范提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#规范提交"}},[t._v("#")]),t._v(" 规范提交")]),t._v(" "),s("h3",{attrs:{id:"安装插件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#安装插件"}},[t._v("#")]),t._v(" 安装插件")]),t._v(" "),s("p",[t._v("安装后，即可使用 git cz 进行快速提交")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i -g commitizen\n\ncommitizen init cz-conventional-changelog --save --save-exact\n")])])]),s("h3",{attrs:{id:"提交时检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交时检测"}},[t._v("#")]),t._v(" 提交时检测")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("npm i -D validate-commit-msg husky\n")])])]),s("p",[t._v("安装后在 package.json 中的 scripts 字段中添加下列字段，提交时，不符合规定的 commit\b msg 不给与提交")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('"commitmsg": "validate-commit-msg"\n')])])]),s("h2",{attrs:{id:"常用基础操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常用基础操作"}},[t._v("#")]),t._v(" 常用基础操作")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# 查看用户信息\ngit config user.name\ngit config user.email\n\n# 更改用户信息\ngit config --global user.name '修改后用户名'\ngit config --global user.email '修改后邮箱'\n\n# 克隆（默认master分支）\ngit clone 地址 -b 分支名字\n\n\n# 修改最后一次提交记录，--no-edit表示不修改提交备注\ngit commit --amend\n\n# 让工作控件回到某个commit，--hard表示强制，并且会清空所有改动！！！未受版本控制的文件除外。\ngit reset hash值\n")])])]),s("h3",{attrs:{id:"branch"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#branch"}},[t._v("#")]),t._v(" branch")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git branch -a")]),t._v(" 查看远程分支")]),t._v(" "),s("li",[s("code",[t._v("git branch -vv")]),t._v(" 可查看各个分支与远程分支的关联情况。")]),t._v(" "),s("li",[s("code",[t._v("git checkout -b 新分支名字")]),t._v(" 新建并切换到该分支")]),t._v(" "),s("li",[s("code",[t._v("git checkout -b 新分支名字 远程服务器/远程分支")]),t._v(" 新拉取远程分支并切换到该分支\n"),s("blockquote",[s("p",[t._v("新分支上传到远程，直接"),s("code",[t._v("git push origin 新的本地分支名字")])])])]),t._v(" "),s("li",[s("code",[t._v("git branch -D 本地分支名字")]),t._v(" 删除本地分支")]),t._v(" "),s("li",[s("code",[t._v("git push orgin :远程分支名字")]),t._v(" 删除远端分支")])]),t._v(" "),s("h3",{attrs:{id:"pull"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[t._v("#")]),t._v(" pull")]),t._v(" "),s("p",[t._v("尽量使用"),s("code",[t._v("git pull --rebase")]),t._v("，这样会使新的远程记录在你现有记录之前，从而避免丑陋的 mergexxxx。")]),t._v(" "),s("h3",{attrs:{id:"merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#merge"}},[t._v("#")]),t._v(" merge")]),t._v(" "),s("ul",[s("li",[t._v("为了处理一个问题，新建了 A 分支，有 3 条 commit。现在需要在 dev 分支上合并 A，使用 "),s("code",[t._v("git merge --squash")]),t._v("，可以将 A 分支所有的记录处理为待提交状态，你只需要填写本次 commit 信息（3 条 commit 不再存在于 dev 分支）。")]),t._v(" "),s("li",[t._v("合并另一个分支的改动时，有时 git 会使用快进方式合并。为了保留合并的历史，使用 "),s("code",[t._v("git merge --no-ff")]),t._v("，让其强行关闭 fast-forward 方式。")])]),t._v(" "),s("h3",{attrs:{id:"stash"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#stash"}},[t._v("#")]),t._v(" stash")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git stash\ngit stash pop\n")])])]),s("h3",{attrs:{id:"rebase-merge"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rebase-merge"}},[t._v("#")]),t._v(" rebase + merge")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git checkout 你开发的分支\ngit rebase master\n\ngit checkout master\ngit merge 你开发的分支\n")])])]),s("h3",{attrs:{id:"修改历史-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#修改历史-commit"}},[t._v("#")]),t._v(" 修改历史 commit")]),t._v(" "),s("p",[t._v("1.运行命令弹出历史提交信息，")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git rebase -i master~5\n")])])]),s("p",[t._v("2.修改历史那一条的 pick 字段为 edit 字段，此时修改那一条历史变为最近一次提交，然后修改 3.回到如初")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("git rebase --continue\n")])])]),s("blockquote",[s("p",[t._v("灵活运用 git stash 与 git stash pop 更方便对历史 commit 进行修改")])]),t._v(" "),s("h3",{attrs:{id:"log"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[t._v("#")]),t._v(" log")]),t._v(" "),s("ul",[s("li",[t._v("--oneline 压缩一行")]),t._v(" "),s("li",[t._v("--decorate 标记会让 git log 显示每个 commit 的引用(如:分支、tag 等)")]),t._v(" "),s("li",[t._v("--graph 图形化显示")]),t._v(" "),s("li",[t._v("--all 显示所有")]),t._v(" "),s("li",[t._v("--p -2 查看最新 2 条的细节变动")]),t._v(" "),s("li",[t._v("--stat -2 查看最新 2 条的文件变动")])])])}),[],!1,null,null,null);a.default=r.exports}}]);